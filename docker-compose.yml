services:
  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=http://localhost:80 # Point to Nginx
      - WDS_SOCKET_PORT=0
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    depends_on:
      - nginx

  backend:
    build: ./backend
    deploy:
      replicas: 2
    expose:
      - "${PORT}"
    volumes:
      - ./backend:/app
      - /app/node_modules
    env_file:
      - ./.env
    depends_on:
      mongodb1:
        condition: service_healthy
      es01:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    networks:
      - app-network
    restart: on-failure

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/api_gateway.conf:/etc/nginx/api_gateway.conf:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
    networks:
      - app-network

  # MongoDB Replica Set
  mongodb1:
    image: mongo:latest
    command: ["--replSet", "rs0", "--bind_ip_all"]
    environment:
      - GLIBC_TUNABLES=glibc.pthread.rseq=0
    volumes:
      - mongodb_data1:/data/db
      - ./mongodb.conf:/etc/mongod.conf
    healthcheck:
      test: mongosh --eval "db.adminCommand('ping')"
      interval: 10s
      timeout: 5s
      retries: 10
    ulimits:
      memlock: -1
    networks:
      - app-network

  mongodb2:
    image: mongo:latest
    command: ["--replSet", "rs0", "--bind_ip_all"]
    environment:
      - GLIBC_TUNABLES=glibc.pthread.rseq=0
    volumes:
      - mongodb_data2:/data/db
      - ./mongodb.conf:/etc/mongod.conf
    healthcheck:
      test: mongosh --eval "db.adminCommand('ping')"
      interval: 10s
      timeout: 10s
      retries: 5
    ulimits:
      memlock: -1
    networks:
      - app-network

  mongodb3:
    image: mongo:latest
    command: ["--replSet", "rs0", "--bind_ip_all"]
    environment:
      - GLIBC_TUNABLES=glibc.pthread.rseq=0
    volumes:
      - mongodb_data3:/data/db
      - ./mongodb.conf:/etc/mongod.conf
    healthcheck:
      test: mongosh --eval "db.adminCommand('ping')"
      interval: 10s
      timeout: 10s
      retries: 10
    ulimits:
      memlock: -1
    networks:
      - app-network

  # MongoDB setup script
  mongo-setup:
    image: mongo:latest
    depends_on:
      mongodb1:
        condition: service_healthy
      mongodb2:
        condition: service_healthy
      mongodb3:
        condition: service_healthy
    volumes:
      - ./scripts:/scripts
    command: ["bash", "/scripts/setup-replica.sh"]
    networks:
      - app-network

  # Elasticsearch Cluster
  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    environment:
      - node.name=es01
      - cluster.name=es-cluster
      - discovery.seed_hosts=es02,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - es_data01:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -vq '\"status\":\"red\"'"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    deploy:
      resources:
        limits:
          memory: 1g
    cap_add:
      - IPC_LOCK
    networks:
      - app-network

  es02:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    environment:
      - node.name=es02
      - cluster.name=es-cluster
      - discovery.seed_hosts=es01,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - es_data02:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -vq '\"status\":\"red\"'"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    deploy:
      resources:
        limits:
          memory: 1g
    cap_add:
      - IPC_LOCK
    networks:
      - app-network

  es03:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    environment:
      - node.name=es03
      - cluster.name=es-cluster
      - discovery.seed_hosts=es01,es02
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - es_data03:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -vq '\"status\":\"red\"'"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    deploy:
      resources:
        limits:
          memory: 1g
    cap_add:
      - IPC_LOCK    
    networks:
      - app-network

  # Scheduler service
  scheduler:
    build: ./scheduler
    environment:
      - API_URL=http://nginx/api/movies/fetch
    depends_on:
      - nginx
      - backend
    networks:
      - app-network

  # Redis Master
  redis-master:
    image: redis:7.2
    env_file:
      - ./.env
    command: redis-server --requirepass ${REDIS_PASSWORD} --masterauth ${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - redis_master_data:/data
    environment:
      - REDIS_REPLICATION_MODE=master
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 512M
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 10s
      retries: 10

  # Redis Slave 1
  redis-slave-1:
    image: redis:7.2
    env_file:
      - ./.env
    command: redis-server --slaveof redis-master ${REDIS_PORT} --requirepass ${REDIS_PASSWORD} --masterauth ${REDIS_PASSWORD}
    depends_on:
      - redis-master
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 512M
      restart_policy:
        condition: on-failure

  # Redis Slave 2
  redis-slave-2:
    image: redis:7.2
    env_file:
      - ./.env
    command: redis-server --slaveof redis-master ${REDIS_PORT} --requirepass ${REDIS_PASSWORD} --masterauth ${REDIS_PASSWORD}
    depends_on:
      - redis-master
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 512M
      restart_policy:
        condition: on-failure

volumes:
  mongodb_data1:
  mongodb_data2:
  mongodb_data3:
  es_data01:
  es_data02:
  es_data03:
  nginx_logs:
  redis_master_data:

networks:
  app-network:
    driver: bridge